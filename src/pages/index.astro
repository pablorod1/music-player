---
const formatDuration = (duration: number) => {
  const minutes = Math.floor(duration / 60);
  const seconds = Math.floor(duration % 60);
  return `0${minutes}:${seconds < 10 ? '0' : ''}${seconds}`; // Format seconds with leading zero
};

import Layout from "../layouts/Layout.astro";
const songs = [
  {
    title: "Lost in the City Lights",
    artist: "Cosmo Sheldrake",
    duration: 72, // In minutes is: 1:12
    image: "/images/cover-1.png",
    audio: "/media/lost-in-city-lights-145038.mp3",
  },
  {
    title: "Forest Lullaby",
    artist: "Lesfm",
    duration: 138, // In minutes is: 2:18
    image: "/images/cover-2.png",
    audio: "/media/forest-lullaby-110624.mp3",
  },
];
var currentSong = 0;
---

<Layout title="Welcome to Astro.">
  <main>
    <div
      class="bg-[#121826a6] p-5 rounded-3xl flex flex-col justify-center items-center"
    >
      <img id="songImage" class="max-w-[300px] w-full h-full rounded-3xl mb-4" src={songs[currentSong].image} alt={songs[currentSong].title} loading="lazy"/>
      <div class="flex flex-col justify-center items-center text-center mb-8">
        <h1 id="songTitle" class="text-[#E5E7EB] font-medium text-base">{songs[currentSong].title}</h1>
        <span id="songArtist" class="text-[#4D5562] font-light text-xs">{songs[currentSong].artist}</span>
      </div>
      <audio id="audioPlayer" src={songs[currentSong].audio} controls style="display:none"></audio>
      <div class="flex flex-col w-full mb-10">
        <div class="flex justify-between items-center mb-1">
          <span id="currentTime" class="text-[#4D5562] text-[10px] font-medium">00:00</span>
          <span id="durationTime" class="text-[#4D5562] text-[10px] font-medium">{formatDuration(songs[currentSong].duration)}</span>
        </div>
        <div class="w-full bg-[#E5E7EB] rounded-full h-1">
          <div id="progressBar" class="bg-[#C93B76] h-1 rounded-full shadow-[0_0_20px_rgba(201,59,118,0.4)]" style="width: 0%"></div>
        </div>
      </div>
      <div class="flex items-center justify-center gap-6 w-full">
        <button id="prevButton" type="button"><img src="/images/Stop_and_play_fill-1.svg" alt="Previous" /></button>
        <button id="playButton" class="bg-[#C93B76] rounded-full shadow-[0_0_20px_rgba(201,59,118,0.4)] p-2" type="button">
          <img src="/images/Play_fill.svg" alt="Play" />
        </button>
        <button id="nextButton" type="button"><img src="/images/Stop_and_play_fill.svg" alt="Next" /></button>
      </div>
    </div>
  </main>
</Layout>

<style>
  /* Añadir una transición suave a la barra de progreso */
  #progressBar {
    transition: width 0.1s linear; /* Duración de la transición */
  }
</style>
<script>
  document.addEventListener("DOMContentLoaded", function() {
    let currentSong = 0; // Definir currentSong en el ámbito del script del cliente
    const songs = [
      {
        title: "Lost in the City Lights",
        artist: "Cosmo Sheldrake",
        duration: 72, // En segundos
        image: "/images/cover-1.png",
        audio: "/media/lost-in-city-lights-145038.mp3",
      },
      {
        title: "Forest Lullaby",
        artist: "Lesfm",
        duration: 138, // En segundos
        image: "/images/cover-2.png",
        audio: "/media/forest-lullaby-110624.mp3",
      },
    ];
    
    const playButton = document.getElementById("playButton");
    const prevButton = document.getElementById("prevButton");
    const nextButton = document.getElementById("nextButton");
    const audioPlayer = document.getElementById("audioPlayer") as HTMLAudioElement;
    const currentTimeDisplay = document.getElementById("currentTime");
    const progressBar = document.getElementById("progressBar");
    const songImage = document.getElementById("songImage") as HTMLImageElement;
    const songTitle = document.getElementById("songTitle") as HTMLHeadingElement;
    const songArtist = document.getElementById("songArtist") as HTMLSpanElement;
    const durationDisplay = document.getElementById("durationTime") as HTMLSpanElement;

    function updateSong(newSongIndex: number) {
      if (newSongIndex < 0 || newSongIndex >= songs.length) return;
      currentSong = newSongIndex;
      if (audioPlayer) {
        audioPlayer.src = songs[currentSong].audio;
        audioPlayer.load(); // Cargar la nueva canción
        audioPlayer.play(); // Reproducir la nueva canción
      }
      if (progressBar) {
        progressBar.style.width = "0%"; // Reiniciar la barra de progreso
      }
      if (currentTimeDisplay) {
        currentTimeDisplay.textContent = "00:00"; // Reiniciar el tiempo actual
      }
      // Actualizar la interfaz
      if (songImage) songImage.src = songs[currentSong].image;
      if (songTitle) songTitle.textContent = songs[currentSong].title;
      if (songArtist) songArtist.textContent = songs[currentSong].artist;
      if (durationDisplay) durationDisplay.textContent = formatTime(songs[currentSong].duration);
    }

    if (playButton && audioPlayer) {
      playButton.addEventListener("click", function () {
        if (audioPlayer.paused) {
          audioPlayer.play();
        } else {
          audioPlayer.pause();
        }
      });
    }

    if (prevButton) {
      prevButton.addEventListener("click", function () {
        const newSongIndex = currentSong - 1;
        updateSong(newSongIndex >= 0 ? newSongIndex : songs.length - 1);
      });
    }

    if (nextButton) {
      nextButton.addEventListener("click", function () {
        const newSongIndex = currentSong + 1;
        updateSong(newSongIndex < songs.length ? newSongIndex : 0);
      });
    }

    if (audioPlayer) {
      audioPlayer.addEventListener("timeupdate", function () {
        const currentTime = Math.floor(audioPlayer.currentTime);
        if (currentTimeDisplay) {
          currentTimeDisplay.textContent = formatTime(currentTime);
        }

        const duration = audioPlayer.duration;
        if (progressBar && duration) {
          const progressPercent = (currentTime / duration) * 100;
          progressBar.style.width = `${progressPercent}%`;
        }
      });
    }

    function formatTime(timeInSeconds: number) {
      const minutes = Math.floor(timeInSeconds / 60);
      const seconds = Math.floor(timeInSeconds % 60);
      return `0${minutes}:${seconds < 10 ? '0' : ''}${seconds}`; // Formatear segundos con cero a la izquierda
    }
  });
</script>
